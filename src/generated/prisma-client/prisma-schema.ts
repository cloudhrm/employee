// Code generated by Prisma (prisma@1.30.1). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateCompany {
  count: Int!
}

type AggregateGroup {
  count: Int!
}

type AggregateKeyPair {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Company {
  id: ID!
  name: String!
  homepage: String
  owner: User
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
}

type CompanyConnection {
  pageInfo: PageInfo!
  edges: [CompanyEdge]!
  aggregate: AggregateCompany!
}

input CompanyCreateInput {
  name: String!
  homepage: String
  owner: UserCreateOneWithoutCompanyInput
  groups: GroupCreateManyWithoutCompanyInput
}

input CompanyCreateOneWithoutGroupsInput {
  create: CompanyCreateWithoutGroupsInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateOneWithoutOwnerInput {
  create: CompanyCreateWithoutOwnerInput
  connect: CompanyWhereUniqueInput
}

input CompanyCreateWithoutGroupsInput {
  name: String!
  homepage: String
  owner: UserCreateOneWithoutCompanyInput
}

input CompanyCreateWithoutOwnerInput {
  name: String!
  homepage: String
  groups: GroupCreateManyWithoutCompanyInput
}

type CompanyEdge {
  node: Company!
  cursor: String!
}

enum CompanyOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  homepage_ASC
  homepage_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CompanyPreviousValues {
  id: ID!
  name: String!
  homepage: String
}

type CompanySubscriptionPayload {
  mutation: MutationType!
  node: Company
  updatedFields: [String!]
  previousValues: CompanyPreviousValues
}

input CompanySubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CompanyWhereInput
  AND: [CompanySubscriptionWhereInput!]
  OR: [CompanySubscriptionWhereInput!]
  NOT: [CompanySubscriptionWhereInput!]
}

input CompanyUpdateInput {
  name: String
  homepage: String
  owner: UserUpdateOneWithoutCompanyInput
  groups: GroupUpdateManyWithoutCompanyInput
}

input CompanyUpdateManyMutationInput {
  name: String
  homepage: String
}

input CompanyUpdateOneRequiredWithoutGroupsInput {
  create: CompanyCreateWithoutGroupsInput
  update: CompanyUpdateWithoutGroupsDataInput
  upsert: CompanyUpsertWithoutGroupsInput
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateOneWithoutOwnerInput {
  create: CompanyCreateWithoutOwnerInput
  update: CompanyUpdateWithoutOwnerDataInput
  upsert: CompanyUpsertWithoutOwnerInput
  delete: Boolean
  disconnect: Boolean
  connect: CompanyWhereUniqueInput
}

input CompanyUpdateWithoutGroupsDataInput {
  name: String
  homepage: String
  owner: UserUpdateOneWithoutCompanyInput
}

input CompanyUpdateWithoutOwnerDataInput {
  name: String
  homepage: String
  groups: GroupUpdateManyWithoutCompanyInput
}

input CompanyUpsertWithoutGroupsInput {
  update: CompanyUpdateWithoutGroupsDataInput!
  create: CompanyCreateWithoutGroupsInput!
}

input CompanyUpsertWithoutOwnerInput {
  update: CompanyUpdateWithoutOwnerDataInput!
  create: CompanyCreateWithoutOwnerInput!
}

input CompanyWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  homepage: String
  homepage_not: String
  homepage_in: [String!]
  homepage_not_in: [String!]
  homepage_lt: String
  homepage_lte: String
  homepage_gt: String
  homepage_gte: String
  homepage_contains: String
  homepage_not_contains: String
  homepage_starts_with: String
  homepage_not_starts_with: String
  homepage_ends_with: String
  homepage_not_ends_with: String
  owner: UserWhereInput
  groups_every: GroupWhereInput
  groups_some: GroupWhereInput
  groups_none: GroupWhereInput
  AND: [CompanyWhereInput!]
  OR: [CompanyWhereInput!]
  NOT: [CompanyWhereInput!]
}

input CompanyWhereUniqueInput {
  id: ID
}

type Group {
  id: ID!
  name: String!
  company: Company!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type GroupConnection {
  pageInfo: PageInfo!
  edges: [GroupEdge]!
  aggregate: AggregateGroup!
}

input GroupCreateInput {
  name: String!
  company: CompanyCreateOneWithoutGroupsInput!
  users: UserCreateManyWithoutGroupsInput
}

input GroupCreateManyWithoutCompanyInput {
  create: [GroupCreateWithoutCompanyInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateManyWithoutUsersInput {
  create: [GroupCreateWithoutUsersInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateWithoutCompanyInput {
  name: String!
  users: UserCreateManyWithoutGroupsInput
}

input GroupCreateWithoutUsersInput {
  name: String!
  company: CompanyCreateOneWithoutGroupsInput!
}

type GroupEdge {
  node: Group!
  cursor: String!
}

enum GroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GroupPreviousValues {
  id: ID!
  name: String!
}

input GroupScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [GroupScalarWhereInput!]
  OR: [GroupScalarWhereInput!]
  NOT: [GroupScalarWhereInput!]
}

type GroupSubscriptionPayload {
  mutation: MutationType!
  node: Group
  updatedFields: [String!]
  previousValues: GroupPreviousValues
}

input GroupSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GroupWhereInput
  AND: [GroupSubscriptionWhereInput!]
  OR: [GroupSubscriptionWhereInput!]
  NOT: [GroupSubscriptionWhereInput!]
}

input GroupUpdateInput {
  name: String
  company: CompanyUpdateOneRequiredWithoutGroupsInput
  users: UserUpdateManyWithoutGroupsInput
}

input GroupUpdateManyDataInput {
  name: String
}

input GroupUpdateManyMutationInput {
  name: String
}

input GroupUpdateManyWithoutCompanyInput {
  create: [GroupCreateWithoutCompanyInput!]
  delete: [GroupWhereUniqueInput!]
  connect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutCompanyInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutCompanyInput!]
  deleteMany: [GroupScalarWhereInput!]
  updateMany: [GroupUpdateManyWithWhereNestedInput!]
}

input GroupUpdateManyWithoutUsersInput {
  create: [GroupCreateWithoutUsersInput!]
  delete: [GroupWhereUniqueInput!]
  connect: [GroupWhereUniqueInput!]
  set: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutUsersInput!]
  deleteMany: [GroupScalarWhereInput!]
  updateMany: [GroupUpdateManyWithWhereNestedInput!]
}

input GroupUpdateManyWithWhereNestedInput {
  where: GroupScalarWhereInput!
  data: GroupUpdateManyDataInput!
}

input GroupUpdateWithoutCompanyDataInput {
  name: String
  users: UserUpdateManyWithoutGroupsInput
}

input GroupUpdateWithoutUsersDataInput {
  name: String
  company: CompanyUpdateOneRequiredWithoutGroupsInput
}

input GroupUpdateWithWhereUniqueWithoutCompanyInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutCompanyDataInput!
}

input GroupUpdateWithWhereUniqueWithoutUsersInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutUsersDataInput!
}

input GroupUpsertWithWhereUniqueWithoutCompanyInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutCompanyDataInput!
  create: GroupCreateWithoutCompanyInput!
}

input GroupUpsertWithWhereUniqueWithoutUsersInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutUsersDataInput!
  create: GroupCreateWithoutUsersInput!
}

input GroupWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  company: CompanyWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  AND: [GroupWhereInput!]
  OR: [GroupWhereInput!]
  NOT: [GroupWhereInput!]
}

input GroupWhereUniqueInput {
  id: ID
}

type KeyPair {
  id: ID!
  public: String!
  private: String!
}

type KeyPairConnection {
  pageInfo: PageInfo!
  edges: [KeyPairEdge]!
  aggregate: AggregateKeyPair!
}

input KeyPairCreateInput {
  public: String!
  private: String!
}

type KeyPairEdge {
  node: KeyPair!
  cursor: String!
}

enum KeyPairOrderByInput {
  id_ASC
  id_DESC
  public_ASC
  public_DESC
  private_ASC
  private_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type KeyPairPreviousValues {
  id: ID!
  public: String!
  private: String!
}

type KeyPairSubscriptionPayload {
  mutation: MutationType!
  node: KeyPair
  updatedFields: [String!]
  previousValues: KeyPairPreviousValues
}

input KeyPairSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: KeyPairWhereInput
  AND: [KeyPairSubscriptionWhereInput!]
  OR: [KeyPairSubscriptionWhereInput!]
  NOT: [KeyPairSubscriptionWhereInput!]
}

input KeyPairUpdateInput {
  public: String
  private: String
}

input KeyPairUpdateManyMutationInput {
  public: String
  private: String
}

input KeyPairWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  public: String
  public_not: String
  public_in: [String!]
  public_not_in: [String!]
  public_lt: String
  public_lte: String
  public_gt: String
  public_gte: String
  public_contains: String
  public_not_contains: String
  public_starts_with: String
  public_not_starts_with: String
  public_ends_with: String
  public_not_ends_with: String
  private: String
  private_not: String
  private_in: [String!]
  private_not_in: [String!]
  private_lt: String
  private_lte: String
  private_gt: String
  private_gte: String
  private_contains: String
  private_not_contains: String
  private_starts_with: String
  private_not_starts_with: String
  private_ends_with: String
  private_not_ends_with: String
  AND: [KeyPairWhereInput!]
  OR: [KeyPairWhereInput!]
  NOT: [KeyPairWhereInput!]
}

input KeyPairWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCompany(data: CompanyCreateInput!): Company!
  updateCompany(data: CompanyUpdateInput!, where: CompanyWhereUniqueInput!): Company
  updateManyCompanies(data: CompanyUpdateManyMutationInput!, where: CompanyWhereInput): BatchPayload!
  upsertCompany(where: CompanyWhereUniqueInput!, create: CompanyCreateInput!, update: CompanyUpdateInput!): Company!
  deleteCompany(where: CompanyWhereUniqueInput!): Company
  deleteManyCompanies(where: CompanyWhereInput): BatchPayload!
  createGroup(data: GroupCreateInput!): Group!
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  updateManyGroups(data: GroupUpdateManyMutationInput!, where: GroupWhereInput): BatchPayload!
  upsertGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group!
  deleteGroup(where: GroupWhereUniqueInput!): Group
  deleteManyGroups(where: GroupWhereInput): BatchPayload!
  createKeyPair(data: KeyPairCreateInput!): KeyPair!
  updateKeyPair(data: KeyPairUpdateInput!, where: KeyPairWhereUniqueInput!): KeyPair
  updateManyKeyPairs(data: KeyPairUpdateManyMutationInput!, where: KeyPairWhereInput): BatchPayload!
  upsertKeyPair(where: KeyPairWhereUniqueInput!, create: KeyPairCreateInput!, update: KeyPairUpdateInput!): KeyPair!
  deleteKeyPair(where: KeyPairWhereUniqueInput!): KeyPair
  deleteManyKeyPairs(where: KeyPairWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  company(where: CompanyWhereUniqueInput!): Company
  companies(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Company]!
  companiesConnection(where: CompanyWhereInput, orderBy: CompanyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CompanyConnection!
  group(where: GroupWhereUniqueInput!): Group
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
  groupsConnection(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupConnection!
  keyPair(where: KeyPairWhereUniqueInput!): KeyPair
  keyPairs(where: KeyPairWhereInput, orderBy: KeyPairOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [KeyPair]!
  keyPairsConnection(where: KeyPairWhereInput, orderBy: KeyPairOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): KeyPairConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  company(where: CompanySubscriptionWhereInput): CompanySubscriptionPayload
  group(where: GroupSubscriptionWhereInput): GroupSubscriptionPayload
  keyPair(where: KeyPairSubscriptionWhereInput): KeyPairSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  company: Company
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  company: CompanyCreateOneWithoutOwnerInput
  groups: GroupCreateManyWithoutUsersInput
}

input UserCreateManyWithoutGroupsInput {
  create: [UserCreateWithoutGroupsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutCompanyInput {
  create: UserCreateWithoutCompanyInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCompanyInput {
  name: String!
  email: String!
  password: String!
  groups: GroupCreateManyWithoutUsersInput
}

input UserCreateWithoutGroupsInput {
  name: String!
  email: String!
  password: String!
  company: CompanyCreateOneWithoutOwnerInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  company: CompanyUpdateOneWithoutOwnerInput
  groups: GroupUpdateManyWithoutUsersInput
}

input UserUpdateManyDataInput {
  name: String
  email: String
  password: String
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  password: String
}

input UserUpdateManyWithoutGroupsInput {
  create: [UserCreateWithoutGroupsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutGroupsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutGroupsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneWithoutCompanyInput {
  create: UserCreateWithoutCompanyInput
  update: UserUpdateWithoutCompanyDataInput
  upsert: UserUpsertWithoutCompanyInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCompanyDataInput {
  name: String
  email: String
  password: String
  groups: GroupUpdateManyWithoutUsersInput
}

input UserUpdateWithoutGroupsDataInput {
  name: String
  email: String
  password: String
  company: CompanyUpdateOneWithoutOwnerInput
}

input UserUpdateWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutGroupsDataInput!
}

input UserUpsertWithoutCompanyInput {
  update: UserUpdateWithoutCompanyDataInput!
  create: UserCreateWithoutCompanyInput!
}

input UserUpsertWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutGroupsDataInput!
  create: UserCreateWithoutGroupsInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  company: CompanyWhereInput
  groups_every: GroupWhereInput
  groups_some: GroupWhereInput
  groups_none: GroupWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`